{"version":3,"sources":["scripts/main.js"],"names":["list","document","querySelector","sortList","newItems","children","sort","prev","next","dataset","salary","match","join","item","append","getEmployees","listOfEmployees","map","name","textContent","position","age"],"mappings":";AAAA,aA2BY,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAzBZ,IAAMA,EAAOC,SAASC,cAAc,MAE9BC,EAAW,WACTC,IADe,EAMFA,EAAAA,EALF,EAAIJ,EAAKK,UAAUC,KAAK,SAACC,EAAMC,GAC9C,OAACA,EAAKC,QAAQC,OAAOC,MAAM,UAAUC,KAAK,KACpCL,EAAKE,QAAQC,OAAOC,MAAM,UAAUC,KAAK,OAH5B,IAMQ,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAlBC,IAAAA,EAAkB,EAAA,MAC3Bb,EAAKc,OAAOD,IAPO,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MAWjBE,EAAe,WAQZC,OAPiB,EAAIhB,EAAKK,UAAUY,IAAI,SAAAJ,GAAS,MAAA,CACtDK,KAAML,EAAKM,YACXC,SAAUP,EAAKJ,QAAQW,SACvBV,OAAQG,EAAKJ,QAAQC,OACrBW,IAAKR,EAAKJ,QAAQY,QAMtBlB,IACAY","file":"main.a80b5ccb.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst list = document.querySelector('ul');\n\nconst sortList = () => {\n  const newItems = [...list.children].sort((prev, next) =>\n    +next.dataset.salary.match(/[0-9]/g).join('')\n      - (+prev.dataset.salary.match(/[0-9]/g).join(''))\n  );\n\n  for (const item of newItems) {\n    list.append(item);\n  }\n};\n\nconst getEmployees = () => {\n  const listOfEmployees = [...list.children].map(item => ({\n    name: item.textContent,\n    position: item.dataset.position,\n    salary: item.dataset.salary,\n    age: item.dataset.age,\n  }));\n\n  return listOfEmployees;\n};\n\nsortList();\ngetEmployees();\n"]}